version: 2.1

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early-return-for-forked-pull-requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            if [[ $(uname -s) == Darwin ]]; then rm -f /usr/local/bin/python3; fi
            ./deps/readies/bin/getpy3
      - run:
          name: Setup automation (part 2)
          shell: /bin/bash -l -eo pipefail
          command: |
            ls -l /usr/local/bin/python* || true
            echo "python3: $(command -v python3)"
            python3 --version
            python3 -m pip list

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "7.2"
      getredis_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: Setup build environment
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            bash -l -c "make info"
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
            redis-server --version

  build-steps:
    parameters:
      build_params:
        type: string
        default: ""
      test_params:
        type: string
        default: ""
      redis_version:
        type: string
        default: "7.2"
      getredis_params:
        type: string
        default: ""
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
          getredis_params: <<parameters.getredis_params>>
      - run:
          name: patch macos tests # Avoid AVX with Regex with CircleCI since virtualization layer doesn't support it. Use sed to replace the relevant entry in cargo.toml
          command: |
            if [[ $(uname -s) == Darwin ]]; then sed -i 's/regex = "1"/regex = { version = "1", features = ["perf", "unicode"] }/g' Cargo.toml; fi
            cat Cargo.toml
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "Cargo.toml" }}
      - run:
          name: Check formatting
          shell: /bin/bash -l -eo pipefail
          command: make lint
      - run:
          name: Build debug
          shell: /bin/bash -l -eo pipefail
          command: make build DEBUG=1 <<parameters.build_params>>
      - run:
          name: Build release
          shell: /bin/bash -l -eo pipefail
          command: make build <<parameters.build_params>>
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "Cargo.toml" }}
          paths:
            - "~/.cargo"
            - "./target"
      - run:
          name: Run tests
          shell: /bin/bash -l -eo pipefail
          command: make test

  build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          shell: /bin/bash -l -eo pipefail
          command: |
            cd build/docker
            make build OSNICK="<<parameters.platform>>" VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" TEST=1 SHOW=1

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - checkout
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Build for platform
          command: |
            cd build/docker
            make build OSNICK="<<parameters.platform>>" VERSION="$CIRCLE_TAG" BRANCH="$CIRCLE_BRANCH" TEST=1 SHOW=1
          no_output_timeout: 30m

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps

  build-platforms:
    parameters:
      platform:
        type: string
    docker:
      - image: debian:bullseye
    steps:
      - build-platforms-steps:
          platform: <<parameters.platform>>

  build-arm-platforms:
    parameters:
      platform:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-macos-x64:
    macos:
      xcode: 13.4.1
    resource_class: macos.x86.medium.gen2
    steps:
      - build-steps

  build-macos-m1:
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.large.gen1
    steps:
      - build-steps

#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

always: &always
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-integ-branch-cron: &on-integ-branch-cron
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default-flow:
    jobs:
      - build-linux-debian:
          name: build
          <<: *not-on-integ-branch
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, focal, bionic, xenial, rocky8, centos7, bullseye, amzn2]
      - build-arm-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, bionic, focal]
      - build-macos-x64:
          <<: *always
      - build-macos-m1:
          <<: *on-integ-and-version-tags
